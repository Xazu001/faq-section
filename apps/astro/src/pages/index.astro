---
import Layout from '@/src/layouts/Layout.astro'
import metadataFetch from '@/utils/metadata.fetch'
import sanityFetch from '../utils/sanity.fetch'
import CirclePlus from '@/src/components/icons/CirclePlus'
import CircleMinus from '@/src/components/icons/CircleMinus'
import FaqMore from '@/src/components/home/FaqMore.astro'

const metadata = await metadataFetch('Index_Page')
const faqData = await sanityFetch({ query: '*[_type == "Faq_Collection"]' })
const fixedFaq = faqData.map((faq) => ({
  question: faq.question?.[0]?.children?.[0]?.text,
  answer: faq.answer?.[0]?.children?.[0]?.text,
}))

const visibleQuestions = 2
const allQuestions = faqData.length
---

<Layout {...metadata}>
  <section id="faq">
    <div>
      <div class="header">
        <h3><span>Pytaj</span>, jakby jutra miało nie być. Odpowiemy!</h3>
      </div>
      <ul>
        {
          fixedFaq.map((faq, index) => (
            <li class={index < visibleQuestions ? '' : 'display-none'}>
              <button>
                <strong>{(index + 1).toString().padStart(2, '0')}</strong>
                <div>
                  <div class="question">
                    <p>{faq.question}</p>
                    <div class="icons">
                      <CirclePlus
                        title="Green circle with plus inside"
                        size="2.4rem"
                        aria-label="Show Answer"
                        className="icon plus"
                      />
                      <CircleMinus
                        title="Green circle with minus inside"
                        size="2.4rem"
                        aria-label="Hide Answer"
                        className="icon minus hidden"
                      />
                    </div>
                  </div>
                  <div class="answer">
                    <p>{faq.answer}</p>
                  </div>
                </div>
              </button>
            </li>
          ))
        }
      </ul>
      <FaqMore visible={visibleQuestions} all={allQuestions} />
    </div>
  </section>
</Layout>
<script>
  // ----- Toggle FAQ items
  const faqItems = document.querySelectorAll('#faq li button')!
  faqItems.forEach((el, idx) => {
    el.addEventListener('click', (e) => {
      ;(e.currentTarget as HTMLButtonElement).parentElement!.toggleAttribute('data-expanded')
      ;(e.currentTarget as HTMLButtonElement).querySelector('.minus')!.classList.toggle('hidden')
      ;(e.currentTarget as HTMLButtonElement).querySelector('.plus')!.classList.toggle('hidden')
    })
  })
</script>
<style>
  section {
    padding-top: 16rem;
  }

  .header {
    display: flex;
    gap: 2rem;
  }

  img {
    width: 50rem;
  }

  ul {
    margin-top: 1.2rem;
  }

  button {
    width: 100%;
    display: flex;
    gap: 3.2rem;
    padding: 2rem 1.6rem;
    text-align: left;
    position: relative;
  }

  button::after {
    position: absolute;
    bottom: 0;
    content: '';
    width: 100%;
    height: 1px;
    background: #75758a;
    transition: 0.3s;
  }

  li[data-expanded] button::after {
    background: linear-gradient(#90f4e8, #2dd282);
  }

  button strong {
    color: #c6cdcc;
    width: 4.8rem;
  }

  .question {
    display: flex;
    gap: 3.2rem;
    justify-content: space-between;
    align-items: center;
  }

  .icon {
    flex-shrink: 0;
  }

  li .answer {
    max-height: 500px;
    overflow: hidden;
    padding-top: 2rem;
    padding-bottom: 2.4rem;
    transition: 0.3s cubic-bezier(0.61, 1, 0.88, 1);
  }

  li:not([data-expanded]) .answer {
    max-height: 0;
    padding-top: 0;
    padding-bottom: 0;
  }

  .icons {
    position: relative;
  }

  .minus {
    position: absolute;
    top: 0;
    left: 0;
  }

  .hidden {
    opacity: 0;
  }

  .icon {
    flex-shrink: 0;
    transition: 0.3s linear;
  }

  .slide-in {
    animation: slide-in 0.3s ease-out;
  }

  @media (prefers-reduced-motion: reduce) {
    li .answer {
      transition: none;
    }

    .icon {
      transition: none;
    }

    .slide-in {
      animation: none;
    }
  }

  @keyframes slide-in {
    0% {
      opacity: 0;
      transform: translateX(-10px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
